@misc{opentelemetry_trace_specification,
title = {{OpenTelemetry Semantic Conventions}},
url = {https://github.com/open-telemetry/opentelemetry-specification/blob/master/semantic-conventions.md},
urldate = {2019-06-22}
}
@misc{opentelemetry,
title = {{OpenTelemetry}},
url = {https://opentelemetry.io/},
urldate = {2019-06-21}
}
@article{Swalin2019,
author = {Swalin, Alvira},
pages = {1--10},
title = {{How to Handle Missing Data}},
url = {https://towardsdatascience.com/how-to-handle-missing-data-8646b18db0d4},
year = {2019}
}
@misc{isolation_forests_and_oneclasssvm_comparison,
author = {Bahnsen, Alejandoro Correa},
title = {{Isolation forests for anomaly detection improve fraud detection.}},
url = {https://blog.easysol.net/using-isolation-forests-anamoly-detection/},
urldate = {2019-06-18},
year = {2016}
}
@misc{json_schema_library,
title = {{JSON Schema}},
url = {https://json-schema.org/},
urldate = {2019-06-16}
}
@article{Herbst2013,
author = {Herbst, Nikolas Roman and Kounev, Samuel and Reussner, Ralf},
isbn = {978-1-931971-02-7},
journal = {Presented as part of the 10th International Conference on Autonomic Computing},
pages = {23--27},
title = {{Elasticity in Cloud Computing: What It Is, and What It Is Not}},
url = {https://pdfs.semanticscholar.org/52d6/19d663b7b842bc39f887d046132dfa2004e7.pdf http://sdqweb.ipd.kit.edu/publications/pdfs/HeKoRe2013-ICAC-Elasticity.pdf},
year = {2013}
}
@inproceedings{Zhou2017,
abstract = {Deep autoencoders, and other deep neural networks, have demon-strated their eeectiveness in discovering non-linear features across many problem domains. However, in many real-world problems, large outliers and pervasive noise are commonplace, and one may not have access to clean training data as required by standard deep denoising autoencoders. Herein, we demonstrate novel extensions to deep autoencoders which not only maintain a deep autoencoders' ability to discover high quality, non-linear features but can also eliminate outliers and noise without access to any clean training data. Our model is inspired by Robust Principal Component Anal-ysis, and we split the input data X into two parts, X = L D + S, where L D can be eeectively reconstructed by a deep autoencoder and S contains the outliers and noise in the original data X . Since such spliiing increases the robustness of standard deep autoen-coders, we name our model a " Robust Deep Autoencoder (RDA) " . Further, we present generalizations of our results to grouped spar-sity norms which allow one to distinguish random anomalies from other types of structured corruptions, such as a collection of fea-tures being corrupted across many instances or a collection of instances having more corruptions than their fellows. Such " Group Robust Deep Autoencoders (GRDA) " give rise to novel anomaly detection approaches whose superior performance we demonstrate on a selection of benchmark problems.},
address = {New York, New York, USA},
author = {Zhou, Chong and Paffenroth, Randy C.},
booktitle = {Proceedings of the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining - KDD '17},
doi = {10.1145/3097983.3098052},
isbn = {9781450348874},
pages = {665--674},
publisher = {ACM Press},
title = {{Anomaly Detection with Robust Deep Autoencoders}},
url = {http://dl.acm.org/citation.cfm?doid=3097983.3098052},
year = {2017}
}
@unpublished{Kothari,
author = {Kothari, R. and Jain, V.},
booktitle = {Proceedings of the 2002 International Joint Conference on Neural Networks. IJCNN'02 (Cat. No.02CH37290)},
doi = {10.1109/IJCNN.2002.1007592},
isbn = {0-7803-7278-6},
pages = {2803--2808},
publisher = {IEEE},
title = {{Learning from labeled and unlabeled data}},
url = {http://ieeexplore.ieee.org/document/1007592/}
}
@misc{pyarango,
title = {{pyArango: Python Client Driver for ArangoDB}},
url = {https://github.com/ArangoDB-Community/pyArango},
urldate = {2019-06-14}
}
@misc{Jaeger,
title = {{Jaeger: open source, end-to-end distributed tracing}},
url = {https://www.jaegertracing.io/},
urldate = {2019-06-09}
}
@misc{Zipkin,
title = {{Apache Zipkin {\textperiodcentered} A distributed tracing system}},
url = {https://zipkin.apache.org/},
urldate = {2019-06-09}
}
@inproceedings{Ikonen2011,
abstract = {The pertinent mission of software project management is to continuously achieve more and more successful projects. In the field of software development, the Kanban method has gained momentum recently, mostly due to its linkages to Lean thinking. However, only a few empirical studies investigate the dynamics and impacts of Kanban on projects. The aim of this study is to improve the understanding on how Kanban impacts on software project work. For the purpose of the study, a framework is developed and empirically investigated in an experimental software R {\&} D setting called Software Factory. The impact of Kanban is evaluated from nine theoretically derived perspectives. The results highlight new findings regarding the application of Kanban in the software context. This bears managerial implications, which is addressed. The key implications of the findings suggest that Kanban and its inherent simplicity motivate the workers and control the project activities. {\textcopyright} 2011 IEEE.},
author = {Ikonen, Marko and Pirinen, Elena and Fagerholm, Fabian and Kettunen, Petri and Abrahamsson, Pekka},
booktitle = {Proceedings - 2011 16th IEEE International Conference on Engineering of Complex Computer Systems, ICECCS 2011},
doi = {10.1109/ICECCS.2011.37},
isbn = {9780769543819},
keywords = {Kanban,Process model,Project management,Software development},
pages = {305--314},
publisher = {IEEE},
title = {{On the impact of Kanban on software project work: An empirical case study investigation}},
url = {http://ieeexplore.ieee.org/document/5773404/},
year = {2011}
}
@article{Esparrachiari2018,
abstract = {Dependency management is a crucial part of system and software design.},
author = {Esparrachiari, Silvia and Reilly, Tanya and Rentz, Ashleigh},
doi = {10.1145/3277539.3277541},
issn = {15427730},
journal = {Queue},
month = {oct},
number = {4},
pages = {44--65},
title = {{Tracking and Controlling Microservice Dependencies}},
url = {http://dl.acm.org/citation.cfm?doid=3289258.3267118},
volume = {16},
year = {2018}
}
@article{Facebook2150,
abstract = {Analyzing large graphs provides valuable insights for social networking and web companies in content ranking and recommendations. While numerous graph processing systems have been developed and evaluated on available benchmark graphs of up to 6.6B edges, they often face signi cant dif- culties in scaling to much larger graphs. Industry graphs can be two orders of magnitude larger - hundreds of billions or up to one trillion edges. In addition to scalability challenges, real world applications often require much more complex graph processing work ows than previously evaluated. In this paper, we describe the usability, performance, and scalability improvements we made to Apache Giraph, an open-source graph processing system, in order to use it on Facebook-scale graphs of up to one trillion edges. We also describe several key extensions to the original Pregel model that make it possible to develop a broader range of production graph applications and work ows as well as improve code reuse. Finally, we report on real-world operations as well as performance characteristics of several large-scale production applications.},
author = {Ching, Avery and Edunov, Sergey and Kabiljo, Maja and Logothetis, Dionysios and Muthukrishnan, Sambavi},
doi = {10.1016/S0001-7310(16)30012-6},
file = {::},
issn = {15782190},
journal = {Proceedings of the VLDB Endowment},
number = {12},
pages = {1804--1815},
title = {{One Trillion Edges: Graph Processing at Facebook-Scale Avery}},
url = {http://www.vldb.org/pvldb/vol8/p1804-ching.pdf},
volume = {8},
year = {2015}
}
@techreport{Noor2017,
author = {Noor, Syeda and Naqvi, Zehra and Yfantidou, Sofia and Zim{\'{a}}nyi, Esteban and Zim{\'{a}}nyi, Zim´},
title = {{Time Series Databases and InfluxDB}},
url = {{https://cs.ulb.ac.be/public/_media/teaching/influxdb_2017.pdf}},
year = {2017}
}
@misc{TanayPant2019,
author = {{Tanay Pant}},
title = {{Ingesting IoT and Sensor Data at Scale – Hacker Noon}},
url = {https://hackernoon.com/ingesting-iot-and-sensor-data-at-scale-ee548e0f8b78},
urldate = {2019-06-07},
year = {2019}
}
@book{Dunning2015,
author = {Dunning, Ted and Friedman, Ellen},
isbn = {9781491917022},
issn = {9781491917022},
keywords = {Ted Dunning and Ellen Friedman.},
pages = {71},
title = {{Time Series Databases New Ways to Store and Access Data}},
url = {https://www.academia.edu/29891282/Time_Series_Databases_New_Ways_to_Store_and_Access_Data},
year = {2015}
}
@misc{Amenya2018,
author = {Amenya},
title = {{TAO — Facebook's Distributed database for Social Graph}},
url = {https://medium.com/coinmonks/tao-facebooks-distributed-database-for-social-graph-c2b45f5346ea},
urldate = {2019-06-07},
year = {2018}
}
@techreport{Turu2017,
author = {Turu, Anna and Ozge, Pi and Supervisor, Koroglu and Zim{\'{a}}nyi, Esteban},
title = {{Universit{\'{e}} libre de Bruxelles Graph Databases and Neo4J}},
url = {https://cs.ulb.ac.be/public/_media/teaching/neo4jj_2017.pdf},
year = {2017}
}
@book{Sasaki2018,
abstract = {The {\#}1 Platform for Connected Data},
author = {Sasaki, Bryce Merkl and Chao, Joy and Howard, Rachel},
keywords = {BT-graph databases},
pages = {45},
title = {{Graph Databases for Beginners}},
url = {https://go.neo4j.com/rs/710-RRC-335/images/Graph_Databases_for_Beginners.pdf?_ga=2.124112970.1994598198.1521285291-1141717847.1521285291&_gac=1.180373973.1521290471.CjwKCAjw-bLVBRBMEiwAmKSB},
year = {2018}
}
@incollection{Celko2013,
abstract = {Abstract Graph databases model relationships, not data. Just as SQL and RDBMS are based on logic and set theory, graph databases are based on graph theory. The classic example of a popular graph problem is called the “Kevin Bacon problem” in the literature. Given actor Kevin Bacon, a graph database links him to anyone else in the movie industry either by a direct link (had some role in a movie with Kevin Bacon) or by a chain of links (had some role in a movie with someone who had some role in a movie with Kevin Bacon). However, other graph problems look for the shortest paths among a set of paths in a transportation network, the smallest set of nodes that cover a graph, and so forth. There is no ANSI/ISO standard language for graphs, but the most popular ones are Gremlin, Neo4j, and SPARQL. They tend to model their syntax after SQL and/or mathematics.},
author = {Celko, Joe},
booktitle = {Joe Celko's Complete Guide to NoSQL},
doi = {10.1016/b978-0-12-407192-6.00003-0},
isbn = {1449356265},
pages = {27--46},
title = {{Graph Databases}},
year = {2013}
}
@misc{FavioVazquez2019,
author = {{Favio V{\'{a}}zquez}},
title = {{Graph Databases. What's the Big Deal? – Towards Data Science}},
url = {https://towardsdatascience.com/graph-databases-whats-the-big-deal-ec310b1bc0ed},
urldate = {2019-06-07},
year = {2019}
}
@book{Trudeau1993,
author = {Trudeau, Richard J. and Trudeau, Richard J.},
isbn = {0486318664},
pages = {209},
publisher = {Dover Pub},
title = {{Introduction to graph theory}},
url = {https://books.google.pt/books/about/Introduction_to_Graph_Theory.html?id=eRLEAgAAQBAJ&redir_esc=y},
year = {1993}
}
@article{Liu2004,
author = {Liu, Hancong and Shah, Sirish and Jiang, Wei},
doi = {10.1016/j.compchemeng.2004.01.009},
issn = {00981354},
journal = {Computers and Chemical Engineering},
keywords = {Breakdown point,Data filter-cleaner,Data preprocessing,Outlier detection,Time series analysis},
number = {9},
pages = {1635--1647},
title = {{On-line outlier detection and data cleaning}},
volume = {28},
year = {2004}
}
@article{Morin2012,
abstract = {Computing is ubiquitous in every domain of scientific research. Software is the means by which scientists harness the power of computers, and much scientific computing relies on software conceived and developed by other practicing researchers. The task of creating scientific software, however, does not end with the publication of computed results. Making the developed software available for inspection and use by other scientists is essential to reproducibility, peer-review, and the ability to build upon others' work. In fulfilling expectations to distribute and disseminate their software, scientist-programmers are required to be not only proficient scientists and coders, but also knowledgeable in legal strategies for licensing their software. Navigating the often complex legal landscape of software licensing can be overwhelming, even for sophisticated programmers. Institutional technology transfer offices (TTOs) exist to help address this need, but due to mismatches in expectations or specific domain knowledge, interactions between scientists and TTO staff can result in suboptimal outcomes. As practitioners in the scientific computing and technology law fields, we have witnessed firsthand the confusion and difficulties associated with licensing scientifically generated software. SBGrid.org is a consortium of scientific software developers and users in hundreds of biomedical research laboratories worldwide. As facilitator and middleman between developers and end-users, we commonly assist in the dissemination and use of scientifically generated software. Through research and advocacy, the Samuelson Law, Technology and Public Policy Clinic works with software developers and other creators on licensing issues, particularly issues related to facilitating 'open access' to scientific, technical, or creative materials. Together, we offer a primer on software licensing with a focus on the particular needs of the scientist software developer. The aim of this guide is to help scientists better engage with their institutional TTO when choosing software licenses.},
author = {Morin, Andrew and Urban, Jennifer and Sliz, Piotr},
doi = {10.1371/journal.pcbi.1002598},
editor = {Lewitter, Fran},
file = {::},
issn = {1553-7358},
journal = {PLoS Computational Biology},
number = {7},
pages = {e1002598},
publisher = {Public Library of Science},
title = {{A Quick Guide to Software Licensing for the Scientist-Programmer}},
url = {https://dx.plos.org/10.1371/journal.pcbi.1002598},
volume = {8},
year = {2012}
}
@misc{NikolajBomannMertz,
author = {{Nikolaj Bomann Mertz}},
title = {{Anomaly Detection in Google Analytics — A New Kind of Alerting}},
url = {https://medium.com/the-data-dynasty/anomaly-detection-in-google-analytics-a-new-kind-of-alerting-9c31c13e5237},
urldate = {2019-06-06}
}
@misc{jupyter_notebooks,
author = {Avila, Damian and Bussonnier, Matthias},
title = {{Jupyter Notebooks}},
url = {https://jupyter.org/}
}
@book{graph_standard_definition,
author = {Sedgewick, Robert and Wayne, Kevin},
publisher = {Addison-Wesley Professional},
title = {{Algorithms, 4th Edition - Graphs}},
url = {https://algs4.cs.princeton.edu/42digraph/},
year = {2011}
}
@misc{open_tracing_specification,
author = {OpenTracing.io},
title = {{The OpenTracing Specification repository}},
url = {https://github.com/opentracing/specification}
}
@misc{open_tracing_semantic_specification,
annote = {Retrieved Fev, 2019},
howpublished = {https://github.com/opentracing/specification/blob/master/specification.md},
title = {{The OpenTracing Semantic Specification}}
}
@misc{open_tracing_semantic_conventions,
annote = {Retrieved Fev, 2019},
howpublished = {https://github.com/opentracing/specification/blob/master/semantic{\_}conventions.md},
title = {{The OpenTracing Semantic Conventions}}
}
@inproceedings{Francesco2017,
author = {Francesco, Paolo Di and Malavolta, Ivano and Lago, Patricia},
booktitle = {2017 IEEE International Conference on Software Architecture (ICSA)},
doi = {10.1109/ICSA.2017.24},
isbn = {978-1-5090-5729-0},
keywords = {Index Terms—Microservices,Software Architecture,System-atic Mapping Study},
pages = {21--30},
publisher = {IEEE},
title = {{Research on Architecting Microservices: Trends, Focus, and Potential for Industrial Adoption}},
year = {2017}
}
@misc{java_steam_api,
author = {Oracle},
title = {{Java Stream API}},
url = {https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html}
}
@misc{scikit-learn,
author = {Scikit-learning},
title = {{Scikit-learn - Machine learning in Python}},
url = {https://github.com/scikit-learn/scikit-learn}
}
@misc{isolation_forests_anomaly_detection,
author = {Li, Susan},
title = {{Time Series of Price Anomaly Detection}},
url = {https://towardsdatascience.com/time-series-of-price-anomaly-detection-13586cd5ff46}
}
@misc{pandas,
author = {Pandas-dev},
title = {{Pandas - Flexible and powerfull time-series data analysis}},
url = {https://github.com/pandas-dev/pandas}
}
@misc{rising_aiops,
annote = {Retrieved Mar, 2019},
author = {Jacob, Sonja},
howpublished = {https://www.appdynamics.com/blog/aiops/aiops-platforms-transform-performance-monitoring/},
title = {{The Rise of AIOps: How Data, Machine Learning, and AI Will Transform Performance Monitoring}}
}
@misc{gartner_aiops,
annote = {Retrieved Jun, 2019},
author = {Lerner, Andrew},
howpublished = {https://blogs.gartner.com/andrew-lerner/2017/08/09/aiops-platforms/},
title = {{AIOps Platforms}}
}
@inproceedings{fonseca2007x,
author = {Fonseca, Rodrigo and Porter, George and Katz, Randy H and Shenker, Scott and Stoica, Ion},
booktitle = {Proceedings of the 4th USENIX conference on Networked systems design {\&} implementation (NSDI'07)},
doi = {10.1.1.108.2220},
issn = {{\textless}null{\textgreater}},
number = {April},
organization = {USENIX Association},
pages = {20},
title = {{X-trace: A pervasive network tracing framework}},
year = {2007}
}
@misc{msc_tracing_project,
annote = {Retrieved Jun, 2019},
author = {Bento, Andr{\'{e}} and Correia, Jaime},
howpublished = {$\backslash$url{\{}https://github.com/andrepbento/MScThesis/tree/master/Graphy{\}}},
title = {{OTP (OpenTracing Processor}}
}
@misc{grafana,
author = {Grafana},
title = {{Grafana - The tool for beautiful metric dashboards}},
url = {https://github.com/grafana/grafana}
}
@misc{observability,
author = {{Peter Waterhouse}},
title = {{Monitoring and Observability — What's the Difference and Why Does It Matter? - The New Stack}},
url = {https://thenewstack.io/monitoring-and-observability-whats-the-difference-and-why-does-it-matter/},
urldate = {2019-06-06}
}
@misc{MauersbergerMicroservices,
author = {{Laura Mauersberger}},
title = {{Microservices: What They Are and Why Use Them}},
url = {https://blog.leanix.net/en/a-brief-history-of-microservices},
urldate = {2019-06-05}
}
@misc{Pahl2017,
abstract = {Containers as a lightweight technology to virtualise applications have recently been successful, particularly to manage applications in the cloud. Often, the management of clusters of containers becomes essential and the orchestration of the construction and deployment becomes a central problem. This emerging topic has been taken up by researchers, but there is currently no secondary study to consolidate this research. We aim to identify, taxonomically classify and systematically compare the existing research body on containers and their orchestration and specifically the application of this technology in the cloud. We have conducted a systematic mapping study of 46 selected studies. We classified and compared the selected studies based on a characterisation framework. This results in a discussion of agreed and emerging concerns in the container orchestration space, positioning it within the cloud context, but also moving it closer to current concerns in cloud platforms, microservices and continuous development.},
author = {Pahl, Claus and Brogi, Antonio and Soldani, Jacopo and Jamshidi, Pooyan},
booktitle = {IEEE Transactions on Cloud Computing},
doi = {10.1109/TCC.2017.2702586},
issn = {21687161},
keywords = {Cloud,Cloud computing,Cluster,Computer architecture,Container,Containers,Data mining,Market research,Orchestration,Protocols,Systematic Literature Review,Systematic Mapping Study,Systematics},
pages = {1--1},
title = {{Cloud Container Technologies: a State-of-the-Art Review}},
url = {http://ieeexplore.ieee.org/document/7922500/},
year = {2017}
}
@techreport{Fonseca,
abstract = {Modern Internet systems often combine different applications (e.g., DNS, web, and database), span different administrative domains, and function in the context of network mechanisms like tunnels, VPNs, NATs, and overlays. Diagnosing these complex systems is a daunting challenge. Although many diagnostic tools exist, they are typically designed for a specific layer (e.g., tracer-oute) or application, and there is currently no tool for reconstructing a comprehensive view of service behavior. In this paper we propose X-Trace, a tracing framework that provides such a comprehensive view for systems that adopt it. We have implemented X-Trace in several protocols and software systems, and we discuss how it works in three deployed scenarios: DNS resolution, a three-tiered photo-hosting website, and a service ac-cessed through an overlay network.},
author = {Fonseca, Rodrigo and Porter, George and Katz, Randy H and Shenker, Scott},
file = {::},
title = {{X-Trace: A Pervasive Network Tracing Framework}},
url = {http://xtrace.cs.berkeley.edu}
}
@misc{huawei_cloud_platform,
title = {{Huawei Cloud Platform}},
url = {https://www.huaweicloud.com/}
}
@article{Joyce1987,
abstract = {The monitoring of distributed systems involves the collection, interpretation, and display of information concerning the interactions among concurrently executing processes. This information and its display can support the debugging, testing, performance evaluation, and dynamic documentation of distributed systems. General problems associated with monitoring are outlined in this paper, and the architecture of a general purpose, extensible, distributed monitoring system is presented. Three approaches to the display of process interactions are described: textual traces, animated graphical traces, and a combination of aspects of the textual and graphical approaches. The roles that each of these approaches fulfill in monitoring and debugging distributed systems are identified and compared. Monitoring tools for collecting communication statistics, detecting deadlock, controlling the non-deterministic execution of distributed systems, and for using protocol specifications in monitoring are also described.$\backslash$nOur discussion is based on experience in the development and use of a monitoring system within a distributed programming environment called Jade. Jade was developed within the Computer Science Department of the University of Calgary and is now being used to support teaching and research at a number of university and research organizations.},
author = {Joyce, Jeffrey and Lomow, Greg and Slind, Konrad and Unger, Brian},
doi = {10.1145/13677.22723},
issn = {07342071},
journal = {ACM Transactions on Computer Systems},
number = {2},
pages = {121--150},
title = {{Monitoring distributed systems}},
url = {http://portal.acm.org/citation.cfm?doid=13677.22723},
volume = {5},
year = {1987}
}
@inproceedings{DiFrancesco2017,
abstract = {{\textcopyright} 2017 IEEE. Microservices are a new trend rising fast from the enterprise world. Even though the design principles around microservices have been identified, it is difficult to have a clear view of existing research solutions for architecting microservices. In this paper we apply the systematic mapping study methodology to identify, classify, and evaluate the current state of the art on architecting microservices from the following three perspectives: publication trends, focus of research, and potential for industrial adoption. More specifically, we systematically define a classification framework for categorizing the research on architecting microservices and we rigorously apply it to the 71 selected studies. We synthesize the obtained data and produce a clear overview of the state of the art. This gives a solid basis to plan for future research and applications of architecting microservices.},
author = {{Di Francesco}, Paolo and Malavolta, Ivano and Lago, Patricia},
booktitle = {Proceedings - 2017 IEEE International Conference on Software Architecture, ICSA 2017},
doi = {10.1109/ICSA.2017.24},
file = {::},
isbn = {9781509057290},
keywords = {Microservices,Software Architecture,Systematic Mapping Study},
pages = {21--30},
title = {{Research on Architecting Microservices: Trends, Focus, and Potential for Industrial Adoption}},
url = {http://cs.gssi.infn.it/ICSA2017ReplicationPackage},
year = {2017}
}
@book{Mazzara2017,
abstract = {BACKGROUND: Physical exercise is an important component of respiratory rehabilitation because it reverses skeletal muscle dysfunction, a clinically important manifestation of COPD associated with reduced health-related quality of life (HRQL) and survival. However, there is controversy regarding the components of the optimal exercise protocol. A study was undertaken to systematically evaluate and summarise randomised controlled trials (RCTs) comparing different exercise protocols for COPD patients. METHODS: Six electronic databases, congress proceedings and bibliographies of included studies were searched without imposing language restrictions. Two reviewers independently screened all records and extracted data on study samples, interventions and methodological characteristics of included studies. RESULTS: The methodological quality of the 15 included RCTs was low to moderate. Strength exercise led to larger improvements of HRQL than endurance exercise (weighted mean difference for Chronic Respiratory Questionnaire 0.27, 95{\%} CI 0.02 to 0.52). Interval exercise seems to be of similar effectiveness as continuous exercise, but there are few data on clinically relevant outcomes. One small RCT which included patients with mild COPD compared the effect of high and low intensity exercise (at 80{\%} and 40{\%} of the maximum exercise capacity, respectively) and found larger physiological training effects from high intensity exercise. CONCLUSIONS: Strength exercise should be routinely incorporated in respiratory rehabilitation. There is insufficient evidence to recommend high intensity exercise for COPD patients and investigators should conduct larger high quality trials to evaluate exercise intensities in patients with moderate to severe COPD.},
address = {Cham},
author = {Mazzara, Manuel and Meyer, Bertrand},
booktitle = {Present and Ulterior Software Engineering},
doi = {10.1007/978-3-319-67425-4},
editor = {Mazzara, Manuel and Meyer, Bertrand},
isbn = {9783319674254},
pages = {1--225},
publisher = {Springer International Publishing},
title = {{Present and ulterior software engineering}},
url = {http://link.springer.com/10.1007/978-3-319-67425-4},
year = {2017}
}
@misc{arango_issues,
author = {Bento, Andr{\'{e}}; and Daouda, Tariq;},
title = {{pyArango Issues}},
url = {https://github.com/ArangoDB-Community/pyArango/issues/137},
year = {2019}
}
@misc{analysing_distributed_trace_data,
author = {Herr, Brittany and Abbas, Naoman},
title = {{Analyzing distributed trace data}},
url = {https://medium.com/@Pinterest_Engineering/analyzing-distributed-trace-data-6aae58919949},
year = {2017}
}
@misc{anomaly_detection_zipkin_tracing_data,
abstract = {At Salesforce, we use Zipkin to perform distributed tracing for microservices. The Zipkin tracing data (called span) can provide performance insights in both production monitoring and pre-production testing. However, the current Zipkin open source instrumentation and UI offers only primitive data tracing functionality and does not have in-depth performance analysis of the span data. The purpose of this project is to use machine learning approach for deep analysis of span data. The data we use in this study is functional and performance tests in pre-production staging environment. Several potential network bottlenecks, microservices performance issues were identified in our studies. Additionally, we also inspected the current coverage of our Zipkin instrumentation.},
author = {Li, Wei},
title = {{Anomaly Detection in Zipkin Trace Data}},
url = {https://engineering.salesforce.com/anomaly-detection-in-zipkin-trace-data-87c8a2ded8a1},
year = {2018}
}
@misc{distributed_tracing,
author = {OpenTracing.io},
title = {{What is Distributed Tracing?}},
url = {{https://opentracing.io/docs/overview/what-is-tracing}}
}
@misc{logging,
author = {Janapati, Siva Prasad Rao},
title = {{Distributed Logging Architecture for Microservices}},
url = {https://dzone.com/articles/distributed-logging-architecture-for-microservices},
year = {2017}
}
@misc{monitoring,
author = {{O'Reilly Media}, Inc.},
title = {{Monitoring Distributed Systems}},
url = {https://landing.google.com/sre/sre-book/chapters/monitoring-distributed-systems/},
year = {2017}
}
@misc{jsonl,
author = {Ward, Ian},
title = {{JSON Lines}},
url = {http://jsonlines.org/},
urldate = {2018-04-18}
}
@misc{tsdb_ranking,
author = {DB-Engines.com},
title = {{Time-Series DBMS Ranking}},
url = {https://db-engines.com/en/ranking_trend/time+series+dbms},
urldate = {2019-01-09}
}
@misc{microservices,
author = {Fowler, Martin and Lewis, James},
title = {{Microservices, a definition of this architectural term}},
url = {https://martinfowler.com/articles/microservices.html},
urldate = {2018-01-07},
year = {2014}
}
@misc{microservices_growth,
author = {Harris, Richard},
title = {{Record growth in microservices}},
url = {https://appdevelopermagazine.com/record-growth-in-microservices/},
urldate = {2019-01-08}
}
@misc{project_estimation_times,
author = {Osetskyi, Victor},
title = {{How to Calculate Man-Hours for The Software Project: Explanation with an Example}},
url = {https://medium.com/existek/how-to-calculate-man-hours-for-the-software-project-explanation-with-an-example-50f2fbe111d2},
urldate = {2019-01-03}
}
@book{control_systems,
author = {Brooker, Graham M.},
booktitle = {Introduction to Biomechatronics},
doi = {10.1049/sbcs003e_ch4},
pages = {159--205},
title = {{Feedback and Control Systems}},
url = {http://people.disim.univaq.it/~costanzo.manes/EDU_stuff/Feedback and Control System_DiStefano_Schaum_Ch01-09.pdf},
year = {2013}
}
@misc{docker,
author = {{Docker Inc.}},
title = {{Why Docker?}},
url = {https://www.docker.com/why-docker},
urldate = {2018-12-24}
}
@misc{what_is_containers,
author = {{Docker Inc.}},
title = {{What is a Container}},
url = {https://www.docker.com/resources/what-container},
urldate = {2018-12-23}
}
@misc{click_log_doc,
author = {Unterwaditzer, Markus},
title = {{Click-log: Simple and beautiful logging}},
url = {https://click-log.readthedocs.io/en/stable/},
urldate = {2018-12-22}
}
@misc{arangodb_vs_ne4j,
author = {{ArangoDB Inc.}},
title = {{What you can't do with Neo4j}},
url = {https://www.arangodb.com/why-arangodb/arangodb-vs-neo4j/},
urldate = {2018-12-15}
}
@misc{neo4j_scalable,
author = {Gundy, Kevin Van},
title = {{Infographic: Understanding Scalability with Neo4j}},
url = {https://neo4j.com/blog/neo4j-scalability-infographic/},
urldate = {2018-12-15}
}
@misc{arangodb_smart_graphs,
author = {{ArangoDB Inc.}},
title = {{ArangoDB Enterprise: SmartGraphs}},
url = {https://www.arangodb.com/why-arangodb/arangodb-enterprise/arangodb-enterprise-smart-graphs/},
urldate = {2018-12-15}
}
@misc{influxdb_vs_opentsdb,
author = {Churilo, Chris},
title = {{InfluxDB Markedly Outperforms OpenTSDB in Time Series Data {\&} Metrics Benchmark}},
url = {https://www.influxdata.com/blog/influxdb-markedly-outperforms-opentsdb-in-time-series-data-metrics-benchmark/},
urldate = {2018-12-12}
}
@misc{influxdb,
author = {InfluxData},
title = {{InfluxDB GitHub}},
url = {https://github.com/influxdata/influxdb},
urldate = {2018-12-12}
}
@misc{opentsdb,
author = {OpenTSDB},
title = {{OpenTSDB}},
url = {https://github.com/OpenTSDB/opentsdb},
urldate = {2018-12-12}
}
@misc{simon_browns_c4_model,
author = {Brown, Simon},
title = {{The C4 model for software architecture}},
url = {https://c4model.com/},
urldate = {2018-12-12}
}
@misc{time_series_databases_explained,
author = {InfluxData},
title = {{Time Series Database (TSDB) Explained}},
url = {https://www.influxdata.com/time-series-database/},
urldate = {2018-12-11}
}
@misc{spans_analysis,
abstract = {At Salesforce, we use Zipkin to perform distributed tracing for microservices. The Zipkin tracing data (called span) can provide performance insights in both production monitoring and pre-production testing. However, the current Zipkin open source instrumentation and UI offers only primitive data tracing functionality and does not have in-depth performance analysis of the span data. The purpose of this project is to use machine learning approach for deep analysis of span data. The data we use in this study is functional and performance tests in pre-production staging environment. Several potential network bottlenecks, microservices performance issues were identified in our studies. Additionally, we also inspected the current coverage of our Zipkin instrumentation.},
author = {Li, Wei},
title = {{Anomaly Detection in Zipkin Trace Data}},
url = {https://engineering.salesforce.com/anomaly-detection-in-zipkin-trace-data-87c8a2ded8a1},
urldate = {2018-12-11},
year = {2018}
}
@misc{open_tracing_data_model_specification,
author = {OpenTracing},
title = {{OpenTracing Data Model Specification}},
url = {https://github.com/opentracing/specification/blob/master/specification.md},
urldate = {2018-12-10}
}
@misc{jaeger_github,
author = {JaegerTracing},
title = {{Jaeger GitHub}},
url = {https://github.com/jaegertracing/jaeger},
urldate = {2018-12-10}
}
@misc{zipkin_github,
author = {OpenZipkin},
title = {{Zipkin Repository}},
url = {https://github.com/openzipkin/zipkin},
urldate = {2018-12-10}
}
@misc{microservices_definition,
author = {Richardson, Chris},
title = {{Microservices Definition}},
url = {https://microservices.io/},
urldate = {2018-10-17}
}
@misc{pip_definition,
author = {{Python Software Foundation}},
title = {{Pip Documentation}},
url = {https://pypi.org/project/pip/},
urldate = {2018-10-16}
}
@misc{neo4j_documentation,
author = {{Neo4J Inc.}},
title = {{No Title}},
url = {https://neo4j.com/docs/},
urldate = {2018-10-16}
}
@misc{arangodb_documentation,
author = {{ArangoDB Inc.}},
title = {{ArangoDB Documentation}},
url = {https://www.arangodb.com/documentation/},
urldate = {2018-10-16}
}
@unpublished{facebook_tao_article,
abstract = {We introduce a simple data model and API tailored for serving the social graph, and TAO, an implementation of this model. TAO is a geographically distributed data store that provides efficient and timely access to the social graph for Facebook's demanding workload using a fixed set of queries. It is deployed at Facebook, replacing memcache for many data types that fit its model. The system runs on thousands of machines, is widely distributed, and provides access to many petabytes of data. TAO can process a billion reads and millions of writes each second.},
author = {Bronson, Nathan and Amsden, Zach and Cabrera, George and Chakka, Prasad and Dimov, Peter and Ding, Hui and Ferris, Jack and Giardullo, Anthony and Kulkarni, Sachin and Li, Harry and Marchukov, Mark and Petrov, Dmitri and Puzar, Lovro and Song, Yee Jiun and Venkataramani, Venkat},
institution = {Facebook, Inc.},
pages = {12},
title = {{TAO: Facebook's Distributed Data Store for the Social Graph}},
url = {https://cs.uwaterloo.ca/~brecht/courses/854-Emerging-2014/readings/data-store/tao-facebook-distributed-datastore-atc-2013.pdf}
}
@misc{observing_definition,
title = {{Observing definition}},
url = {https://www.thefreedictionary.com/observing},
urldate = {2018-10-13}
}
@unpublished{ligra_graph_processing_framework,
abstract = {There has been significant recent interest in parallel frameworks for processing graphs due to their applicability in studying social networks, the Web graph, networks in biology, and unstructured meshes in scientific simulation. Due to the desire to process large graphs, these systems have emphasized the ability to run on distributed memory machines. Today, however, a single multicore server can support more than a terabyte of memory, which can fit graphs with tens or even hundreds of billions of edges. Furthermore, for graph algorithms, shared-memory multicores are generally significantly more efficient on a per core, per dollar, and per joule basis than distributed memory systems, and shared-memory algorithms tend to be simpler than their distributed counterparts. In this paper, we present a lightweight graph processing framework that is specific for shared-memory parallel/multicore machines, which makes graph traversal algorithms easy to write. The framework has two very simple routines, one for mapping over edges and one for mapping over vertices. Our routines can be applied to any subset of the vertices, which makes the framework useful for many graph traversal algorithms that operate on subsets of the vertices. Based on recent ideas used in a very fast algorithm for breadth-first search (BFS), our routines automatically adapt to the density of vertex sets. We implement several algorithms in this framework, including BFS, graph radii estimation, graph connectivity, betweenness centrality, PageRank and single-source shortest paths. Our algorithms expressed using this framework are very simple and concise, and perform almost as well as highly optimized code. Furthermore, they get good speedups on a 40-core machine and are significantly more efficient than previously reported results using graph frameworks on machines with many more cores.},
address = {Pittsburgh},
author = {Shun, Julian and Blelloch, Guy E.},
institution = {Carnegie Mellon University},
keywords = {Graph Algorithms,Parallel Programming,Shared Memory},
title = {{Ligra: A Lightweight Graph Processing Framework for Shared Memory}},
url = {https://www.cs.cmu.edu/{~}jshun/ligra.pdf}
}
@misc{graph_data_management_systems,
author = {Deshpande, Amol},
title = {{Surveying the Landscape of Graph Data Management Systems}},
url = {https://medium.com/@amolumd/graph-data-management-systems-f679b60dd9e0},
urldate = {2018-11-24}
}
@misc{what_is_opensatck,
author = {OpenStack},
title = {{What is OpenStack?}},
url = {https://www.openstack.org/software/},
urldate = {2018-11-29}
}
@misc{what_is_kubernetes,
author = {{Cloud Native Computing Foundation}},
title = {{What is Kubernetes?}},
url = {https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/},
urldate = {2018-11-29}
}
@misc{what_is_opentracing,
author = {OpenTracing.io},
title = {{What is OpenTracing?}},
url = {https://opentracing.io/docs/overview/what-is-tracing/},
urldate = {2018-11-29}
}
@misc{what_is_opencensus,
author = {{Google LLC}},
title = {{What is OpenCensus?}},
url = {https://opencensus.io/},
urldate = {2018-11-29}
}
@misc{gantt_project_tool,
title = {{GanttProject}},
url = {https://www.ganttproject.biz/},
urldate = {2018-11-29}
}
@misc{networkx,
title = {{NetworkX}},
url = {https://networkx.github.io/},
urldate = {2018-12-03}
}
@misc{apache_giraph,
author = {{Apache Software Foundation}},
title = {{Apache Giraph}},
url = {http://giraph.apache.org/},
urldate = {2018-12-03}
}
@unpublished{mastering_aiops,
author = {Nedelkoski, Sahso and Cardoso, Jorge and Kao, Odej},
file = {:home/andrepbento/Downloads/PID5812437.pdf:pdf},
pages = {10},
title = {{Anomaly Detection and Classification using Distributed Tracing and Deep Learning}},
url = {https://pt.slideshare.net/JorgeCardoso4/mastering-aiops-with-deep-learning},
year = {2018}
}
@article{Sambasivan2014,
abstract = {End-to-end tracing captures the work ow of causally-related activity (e.g., work done to process a request) within and among the components of a distributed system. As distributed systems grow in scale and complexity, such tracing is becoming a critical tool for management tasks like diagnosis and resource accounting. Drawing upon our experiences building and using end-to-end tracing infrastructures, this paper distills the key design axes that dictate trace utility for important use cases. Developing tracing infrastructures without explicitly understanding these axes and choices for them will likely result in infrastructures that are not useful for their intended purposes. In addition to identifying the design axes, this paper identi es good design choices for various tracing use cases, contrasts them to choices made by previous tracing implementations, and shows where prior implementations fall short. It also identi es remaining challenges on the path to making tracing an integral part of distributed system design.},
author = {Sambasivan, Raja R and Fonseca, Rodrigo and Shafer, Ilari and Ganger, Gregory R},
file = {:home/andrepbento/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sambasivan et al. - 2014 - So, you want to trace your distributed system Key design insights from years of practical experience.pdf:pdf},
keywords = {Design,Distributed systems,End-to-end tracing},
pages = {25},
title = {{So, you want to trace your distributed system? Key design insights from years of practical experience}},
url = {http://www.pdl.cmu.edu/PDL-FTP/SelfStar/CMU-PDL-14-102.pdf},
year = {2014}
}
@incollection{Dragoni2017,
abstract = {Microservices is an architectural style inspired by service-oriented computing that has recently started gaining popularity. Before presenting the current state-of-the-art in the field, this chapter reviews the history of software architecture, the reasons that led to the diffusion of objects and services first, and microservices later. Finally, open problems and future challenges are introduced. This survey primarily addresses newcomers to the discipline, while offering an academic viewpoint on the topic. In addition, we investigate some practical issues and point out some potential solutions.},
address = {Cham},
author = {Dragoni, Nicola and Giallorenzo, Saverio and Lafuente, Alberto Lluch and Mazzara, Manuel and Montesi, Fabrizio and Mustafin, Ruslan and Safina, Larisa},
booktitle = {Present and Ulterior Software Engineering},
doi = {10.1007/978-3-319-67425-4_12},
file = {:home/andrepbento/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Dragoni et al. - Unknown - Microservices yesterday, today, and tomorrow(2).pdf:pdf},
isbn = {9783319674254},
pages = {195--216},
publisher = {Springer International Publishing},
title = {{Microservices: Yesterday, today, and tomorrow}},
url = {https://hal.inria.fr/hal-01631455},
year = {2017}
}
@techreport{Sigelman2010,
abstract = {Modern Internet services are often implemented as complex, large-scale distributed systems. These applications are constructed from collections of software modules that may be developed by different teams, perhaps in different programming languages, and could span many thousands of machines across multiple physical facilities. Tools that aid in understanding system behavior and reasoning about performance issues are invaluable in such an environment. Here we introduce the design of Dapper, Googles production distributed systems tracing infrastructure, and describe how our design goals of low overhead, application-level transparency, and ubiquitous deployment on a very large scale system were met. Dapper shares conceptual similarities with other tracing systems, particularly Magpie 3 and X-Trace 12, but certain design choices were made that have been key to its success in our environment, such as the use of sampling and restricting the instrumentation to a rather small number of common libraries. The main goal of this paper is to report on our experience building, deploying and using the system for over two years, since Dappers foremost measure of success has been its usefulness to developer and operations teams. Dapper began as a self-contained tracing tool but evolved into a monitoring platform which has enabled the creation of many different tools, some of which were not anticipated by its designers. We describe a few of the analysis tools that have been built using Dapper, share statistics about its usage within Google, present some example use cases, and discuss lessons learned so far.},
author = {Sigelman, Benjamin H and Andr, Luiz and Burrows, Mike and Stephenson, Pat and Plakal, Manoj and Beaver, Donald and Jaspan, Saul and Shanbhag, Chandan},
booktitle = {Google Technical Report dapper-2010-1},
file = {:home/andrepbento/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sigelman et al. - 2010 - Dapper, a Large-Scale Distributed Systems Tracing Infrastructure.pdf:pdf},
number = {April},
pages = {14},
title = {{Dapper, a Large-Scale Distributed Systems Tracing Infrastructure}},
url = {https://static.googleusercontent.com/media/research.google.com/pt-PT//archive/papers/dapper-2010-1.pdf https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36356.pdf},
year = {2010}
}
@book{Brillinger2006,
author = {Brillinger, David R.},
booktitle = {Biometrics},
doi = {10.2307/2530198},
isbn = {0898715016},
issn = {0006341X},
number = {4},
pages = {869},
publisher = {Society for Industrial and Applied Mathematics},
title = {{Time Series: Data Analysis and Theory.}},
url = {https://books.google.pt/books/about/Time_Series.html?id=PX5HExMKER0C&redir_esc=y},
volume = {37},
year = {2006}
}
@book{Newman,
author = {Newman, Sam},
file = {:home/andrepbento/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Newman - 280 - Building Microservices Designing Fine-Grained Systems.pdf:pdf},
isbn = {978-1-491-95035-7},
title = {{Building Microservices: Designing Fine-Grained Systems}},
url = {http://ce.sharif.edu/courses/96-97/1/ce924-1/resources/root/Books/building-microservices-designing-fine-grained-systems.pdf},
year = {280}
}
@unpublished{networkx_speed,
abstract = {Background: Contact network models have become increasingly common in epidemiology, but we lack a flexible programming framework for the generation and analysis of epidemiological contact networks and for the simulation of disease transmission through such networks. Results: Here we present EpiFire, an applications programming interface and graphical user interface implemented in C++, which includes a fast and efficient library for generating, analyzing and manipulating networks. Networkbased percolation and chain-binomial simulations of susceptible-infected-recovered disease transmission, as well as traditional non-network mass-action simulations, can be performed using EpiFire. Conclusions: EpiFire provides an open-source programming interface for the rapid development of network models with a focus in contact network epidemiology. EpiFire also provides a point-and-click interface for generating networks, conducting epidemic simulations, and creating figures. This interface is particularly useful as a pedagogical tool.},
author = {Hladish, Thomas and Melamud, Eugene and Barrera, Luis Alberto and Galvani, Alison and Meyers, Lauren Ancel},
file = {:home/andrepbento/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Hladish et al. - Unknown - EpiFire An open source C library and application for contact network epidemiology.pdf:pdf},
institution = {BMC Bioinformatics},
title = {{EpiFire: An open source C++ library and application for contact network epidemiology}}
}
@inproceedings{Sambasivan2016,
author = {Sambasivan, Raja R and Shafer, Ilari and Mace, Jonathan and Sigelman, Benjamin H and Fonseca, Rodrigo and Ganger, Gregory R},
doi = {10.1145/2987550.2987568},
keywords = {Measurement techniques},
pages = {401--414},
title = {{Principled workflow-centric tracing of distributed systems}},
url = {https://www.rajasambasivan.com/wp-content/uploads/2017/07/sambasivan-socc16.pdf},
year = {2016}
}
@inproceedings{McColl2014,
author = {McColl, Robert Campbell and Ediger, David and Poovey, Jason and Campbell, Dan and Bader, David A.},
doi = {10.1145/2567634.2567638},
isbn = {9781450326544},
keywords = {H24 [Database Man-agement]: Systems-Parallel datab,graph algorithms,relational databases},
pages = {11--18},
title = {{A performance evaluation of open source graph databases}},
url = {http://dx.doi.org/10.1145/2567634.2567638},
year = {2014}
}
